plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    redissonVersion = '3.40.0'
    tikaVersion = '3.0.0'
    jtsVersion = '1.20.0'
    ffmpegVersion = '7.1-1.5.11'
    javacvVersion = '1.5.11'
    mybatisPlusVersion = '3.5.9'
    springdocVersion = '2.7.0'
    awsVersion = '2.29.23'
    lutungVersion = '0.0.8'
    firebaseVersion = '9.4.1'
    findbugsVersion = '3.0.1u2'
    gsonVersion = '2.11.0'
    libphonenumberVersion = '8.13.51'
    html2pdfVersion = '6.0.0'
    hutoolVersion = '5.8.34'
    saTokenVersion = '1.39.0'
    ognlVersion = '3.4.3'
    jaxbApiVersion = '2.3.1'
    twilioVersion = '10.6.3'
    micaAutoVersion = '3.1.4'
}

group = 'life.725'
archivesBaseName = 'takeshi-spring-boot-starter'
//version = '1.0.1'
version = '24.12.06.7-SNAPSHOT'

javadoc.options.encoding = 'UTF-8'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

// 不生成可运行的jar包
bootJar.enabled = false

jar {
    enabled = true
    archiveClassifier = ''
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            pom {
                name = archivesBaseName
                description = '一个集成了各种库的，可以快速构建SpringBoot项目框架的库，GitHub地址：https://github.com/lihuaihe/takeshi'
                url = 'https://github.com/lihuaihe/takeshi'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = '七濑武【Nanase Takeshi】'
                        email = 'takeshi@725.life'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/lihuaihe/takeshi.git'
                    developerConnection = 'scm:git:ssh://github.com/lihuaihe/takeshi.git'
                    url = 'https://github.com/lihuaihe/takeshi'
                }
            }
        }
    }
    repositories {
        maven {
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv('SIGNING_KEY_ID')
    def signingSecretKey = file(System.getenv('SIGNING_SECRET_KEY')).text
    def signingPassword = System.getenv('SIGNING_PASSWORD')
    useInMemoryPgpKeys(signingKeyId, signingSecretKey, signingPassword)
    sign publishing.publications.mavenJava
}

dependencies {
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework.boot:spring-boot-starter-thymeleaf'
    api 'org.springframework.retry:spring-retry'
    api "org.redisson:redisson-spring-boot-starter:${redissonVersion}"
    api "org.apache.tika:tika-core:${tikaVersion}"
    // geoPoint
    api "org.locationtech.jts:jts-core:${jtsVersion}"

    // javacv 和 ffmpeg-platform
//    compileOnly "org.bytedeco:ffmpeg:${ffmpegVersion}:macosx-x86_64"
//    compileOnly "org.bytedeco:ffmpeg:${ffmpegVersion}:windows-x86_64"
//    compileOnly "org.bytedeco:ffmpeg:${ffmpegVersion}:linux-x86_64"
    compileOnly "org.bytedeco:ffmpeg:${ffmpegVersion}"
    compileOnly "org.bytedeco:javacv:${javacvVersion}"

    api platform("com.baomidou:mybatis-plus-bom:${mybatisPlusVersion}")
    api "com.baomidou:mybatis-plus-spring-boot3-starter"
    api "com.baomidou:mybatis-plus-jsqlparser"

    api "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    compileOnly platform("software.amazon.awssdk:bom:${awsVersion}")
    compileOnly 'software.amazon.awssdk:secretsmanager'
    compileOnly 'software.amazon.awssdk:s3-transfer-manager'

    compileOnly "com.mandrillapp.wrapper.lutung:lutung:${lutungVersion}"
    compileOnly "com.google.firebase:firebase-admin:${firebaseVersion}"
    api "com.google.code.findbugs:annotations:${findbugsVersion}"
    api "com.google.code.gson:gson:${gsonVersion}"
    api "com.googlecode.libphonenumber:libphonenumber:${libphonenumberVersion}"
    compileOnly "com.itextpdf:html2pdf:${html2pdfVersion}"

    api "cn.hutool:hutool-all:${hutoolVersion}"
    api "cn.dev33:sa-token-spring-boot3-starter:${saTokenVersion}"
    api "cn.dev33:sa-token-redisson-jackson:${saTokenVersion}"

    api "ognl:ognl:${ognlVersion}"
    // 使用S3时提示：JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
    api "javax.xml.bind:jaxb-api:${jaxbApiVersion}"

    compileOnly "com.twilio.sdk:twilio:${twilioVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "net.dreamlu:mica-auto:${micaAutoVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}
