<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 日志等级从低到高：TRACE -> DEBUG -> INFO -> WARN -> ERROR -> FATAL -->
    <springProperty name="applicationName" source="spring.application.name" scope="context" defaultValue=""/>
    <contextName>${applicationName}</contextName>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){cyan} [%clr(%X{traceId})] %clr(${LOG_LEVEL_PATTERN:-%p}) [%clr(%thread){blue}] %clr(%logger){cyan}:%clr(%line){magenta} %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN"
              value="[%contextName] %d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} [%X{traceId}] %level [%thread] %logger:%line %msg%n"/>
    <property name="ENCODING" value="UTF-8"/>

    <!-- 压缩类型 -->
    <springProperty name="compressionType" source="takeshi.logback.compression-type" scope="context"/>
    <if condition='isDefined("compressionType")'>
        <then>
            <property name="EXTENSION_NAME" value="log.${compressionType}"/>
        </then>
        <else>
            <property name="EXTENSION_NAME" value="log"/>
        </else>
    </if>

    <!-- dev环境日志配置 -->
    <springProperty name="devStdoutEnabled" source="takeshi.logback.dev.stdout-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="devDebugEnabled" source="takeshi.logback.dev.debug-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="devInfoEnabled" source="takeshi.logback.dev.info-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="devWarnEnabled" source="takeshi.logback.dev.warn-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="devErrorEnabled" source="takeshi.logback.dev.error-enabled" scope="context"
                    defaultValue="false"/>

    <!-- dev环境日志配置 -->
    <springProperty name="testStdoutEnabled" source="takeshi.logback.test.stdout-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="testDebugEnabled" source="takeshi.logback.test.debug-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="testInfoEnabled" source="takeshi.logback.test.info-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="testWarnEnabled" source="takeshi.logback.test.warn-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="testErrorEnabled" source="takeshi.logback.test.error-enabled" scope="context"
                    defaultValue="false"/>

    <!-- dev环境日志配置 -->
    <springProperty name="prodStdoutEnabled" source="takeshi.logback.prod.stdout-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="prodDebugEnabled" source="takeshi.logback.prod.debug-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="prodInfoEnabled" source="takeshi.logback.prod.info-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="prodWarnEnabled" source="takeshi.logback.prod.warn-enabled" scope="context"
                    defaultValue="false"/>
    <springProperty name="prodErrorEnabled" source="takeshi.logback.prod.error-enabled" scope="context"
                    defaultValue="false"/>

    <!-- 禁用logback自身日志输出 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/debug.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>
                ${LOG_PATH}/debug-%d{yyyy-MM-dd}.%i.${EXTENSION_NAME}
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 到了指定大小就会再创建一个文件 -->
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文档保留天数-->
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <!-- 此日志文档只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/info.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_PATH}/info-%d{yyyy-MM-dd}.%i.${EXTENSION_NAME}
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/warn.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_PATH}/warn-%d{yyyy-MM-dd}.%i.${EXTENSION_NAME}
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_PATH}/error-%d{yyyy-MM-dd}.%i.${EXTENSION_NAME}
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <springProfile name="dev">
        <root level="info">
            <if condition="${devStdoutEnabled}">
                <then>
                    <appender-ref ref="STDOUT"/>
                </then>
            </if>
            <if condition="${devDebugEnabled}">
                <then>
                    <appender-ref ref="DEBUG_FILE"/>
                </then>
            </if>
            <if condition="${devInfoEnabled}">
                <then>
                    <appender-ref ref="INFO_FILE"/>
                </then>
            </if>
            <if condition="${devWarnEnabled}">
                <then>
                    <appender-ref ref="WARN_FILE"/>
                </then>
            </if>
            <if condition="${devErrorEnabled}">
                <then>
                    <appender-ref ref="ERROR_FILE"/>
                </then>
            </if>
        </root>
    </springProfile>

    <springProfile name="test">
        <root level="info">
            <if condition="${testStdoutEnabled}">
                <then>
                    <appender-ref ref="STDOUT"/>
                </then>
            </if>
            <if condition="${testDebugEnabled}">
                <then>
                    <appender-ref ref="DEBUG_FILE"/>
                </then>
            </if>
            <if condition="${testInfoEnabled}">
                <then>
                    <appender-ref ref="INFO_FILE"/>
                </then>
            </if>
            <if condition="${testWarnEnabled}">
                <then>
                    <appender-ref ref="WARN_FILE"/>
                </then>
            </if>
            <if condition="${testErrorEnabled}">
                <then>
                    <appender-ref ref="ERROR_FILE"/>
                </then>
            </if>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="info">
            <if condition="${prodStdoutEnabled}">
                <then>
                    <appender-ref ref="STDOUT"/>
                </then>
            </if>
            <if condition="${prodDebugEnabled}">
                <then>
                    <appender-ref ref="DEBUG_FILE"/>
                </then>
            </if>
            <if condition="${prodInfoEnabled}">
                <then>
                    <appender-ref ref="INFO_FILE"/>
                </then>
            </if>
            <if condition="${prodWarnEnabled}">
                <then>
                    <appender-ref ref="WARN_FILE"/>
                </then>
            </if>
            <if condition="${prodErrorEnabled}">
                <then>
                    <appender-ref ref="ERROR_FILE"/>
                </then>
            </if>
        </root>
    </springProfile>

</configuration>
